package gockle

import "github.com/stretchr/testify/mock"

// IteratorMock is an autogenerated mock type for the Iterator type
type IteratorMock struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IteratorMock) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PageState provides a mock function with given fields:
func (_m *IteratorMock) PageState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: results
func (_m *IteratorMock) Scan(results ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, results...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(results...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ScanMap provides a mock function with given fields: results
func (_m *IteratorMock) ScanMap(results map[string]interface{}) bool {
	ret := _m.Called(results)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(results)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WillSwitchPage provides a mock function with given fields:
func (_m *IteratorMock) WillSwitchPage() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
