package gockle

import (
	"github.com/gocql/gocql"
	"github.com/stretchr/testify/mock"
)

// SessionMock is an autogenerated mock type for the Session type
type SessionMock struct {
	mock.Mock
}

// BatchMock provides a mock function with given fields: kind
func (_m *SessionMock) Batch(kind BatchKind) Batch {
	ret := _m.Called(kind)

	var r0 Batch
	if rf, ok := ret.Get(0).(func(BatchKind) Batch); ok {
		r0 = rf(kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Batch)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *SessionMock) Close() {
	_m.Called()
}

// Columns provides a mock function with given fields: keyspace, table
func (_m *SessionMock) Columns(keyspace string, table string) (map[string]gocql.TypeInfo, error) {
	ret := _m.Called(keyspace, table)

	var r0 map[string]gocql.TypeInfo
	if rf, ok := ret.Get(0).(func(string, string) map[string]gocql.TypeInfo); ok {
		r0 = rf(keyspace, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]gocql.TypeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(keyspace, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: statement, arguments
func (_m *SessionMock) Exec(statement string, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, statement)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(statement, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: statement, arguments
func (_m *SessionMock) Query(statement string, arguments ...interface{}) Query {
	var _ca []interface{}
	_ca = append(_ca, statement)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) Query); ok {
		r0 = rf(statement, arguments...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Query)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: statement, results, arguments
func (_m *SessionMock) Scan(statement string, results []interface{}, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, statement, results)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []interface{}, ...interface{}) error); ok {
		r0 = rf(statement, results, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanIterator provides a mock function with given fields: statement, arguments
func (_m *SessionMock) ScanIterator(statement string, arguments ...interface{}) Iterator {
	var _ca []interface{}
	_ca = append(_ca, statement)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 Iterator
	if rf, ok := ret.Get(0).(func(string, ...interface{}) Iterator); ok {
		r0 = rf(statement, arguments...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iterator)
		}
	}

	return r0
}

// ScanMap provides a mock function with given fields: statement, results, arguments
func (_m *SessionMock) ScanMap(statement string, results map[string]interface{}, arguments ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, statement, results)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, ...interface{}) error); ok {
		r0 = rf(statement, results, arguments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanMapSlice provides a mock function with given fields: statement, arguments
func (_m *SessionMock) ScanMapSlice(statement string, arguments ...interface{}) ([]map[string]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, statement)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []map[string]interface{}); ok {
		r0 = rf(statement, arguments...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(statement, arguments...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanMapTx provides a mock function with given fields: statement, results, arguments
func (_m *SessionMock) ScanMapTx(statement string, results map[string]interface{}, arguments ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, statement, results)
	_ca = append(_ca, arguments...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, ...interface{}) bool); ok {
		r0 = rf(statement, results, arguments...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}, ...interface{}) error); ok {
		r1 = rf(statement, results, arguments...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tables provides a mock function with given fields: keyspace
func (_m *SessionMock) Tables(keyspace string) ([]string, error) {
	ret := _m.Called(keyspace)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(keyspace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyspace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
